[1mdiff --git a/contracts/Token.sol b/contracts/Token.sol[m
[1mindex b47b91a..2cc6313 100644[m
[1m--- a/contracts/Token.sol[m
[1m+++ b/contracts/Token.sol[m
[36m@@ -1,77 +1,96 @@[m
[31m-// SPDX-License-Identifier: UNLICENSED[m
[31m-pragma solidity ^0.8.0;[m
[31m-[m
[31m-// Import this file to use console.log[m
[31m-import 'hardhat/console.sol';[m
[31m-[m
[31m-// console.log('Unlock time is %o and block timestamp is %o', unlockTime, block.timestamp);[m
[31m-contract Token {[m
[31m-    // string public name = 'Dapp University';[m
[31m-    // string public symbol = 'DAPP';[m
[31m-    [m
[31m-    // uint256 public totalSupply = 1000000 * (10**decimals);[m
[31m-    string public name;[m
[31m-    string public symbol;[m
[31m-    uint256 public decimals = 18;[m
[31m-    uint256 public totalSupply;[m
[31m-[m
[31m-    event Transfer(address indexed from, address indexed to, uint256 value);[m
[31m-	event Approval(address indexed owner,[m
[31m-	 address indexed spender,[m
[31m-	 uint256 value[m
[31m-	 );[m
[31m-    // Track balanaces[m
[31m-    mapping(address => uint256) public balanceOf;[m
[31m-    // Send Tokens[m
[31m-    mapping(address => mapping(address => uint256)) public allowance;[m
[31m-[m
[31m-    constructor([m
[31m-    	string memory _name,[m
[31m-    	string memory _symbol,[m
[31m-    	uint256 _totalSupply[m
[31m-    	){[m
[31m-    	name = _name;[m
[31m-    	symbol = _symbol;[m
[31m-    	totalSupply = _totalSupply * (10**decimals);[m
[31m-		balanceOf[msg.sender] = totalSupply;[m
[31m-[m
[31m-    }[m
[31m-[m
[31m-[m
[31m-[m
[31m-    function transfer(address _to, uint256 _value)[m
[31m-	    public [m
[31m-	    returns (bool success)[m
[31m-	    {[m
[31m-[m
[31m-	    	// if (balanceOf[msg.sender] > _value)){[m
[31m-[m
[31m-	    	// }[m
[31m-	    	require( balanceOf[msg.sender] >= _value);[m
[31m-	    	require(_to != address(0));[m
[31m-[m
[31m-	    	balanceOf[msg.sender] = balanceOf[msg.sender] - _value;[m
[31m-	    	balanceOf[_to] =  balanceOf[_to] + _value;[m
[31m-	    	[m
[31m-	    	// emit Event[m
[31m-	    	emit Transfer(msg.sender, _to, _value);[m
[31m-	    	return true;[m
[31m-[m
[31m-	    }[m
[31m-[m
[31m-[m
[31m-	function approve(address _spender, uint256 _value)[m
[31m-		public returns (bool success)[m
[31m-		{[m
[31m-			require(_spender != address(0));[m
[31m-[m
[31m-			// allowance[msg.sender][_spender.address] = 0;[m
[31m-			allowance[msg.sender][_spender] = _value;[m
[31m-			require(allowance[msg.sender][_spender] == _value);[m
[31m-	    	emit Approval(msg.sender, _spender, _value);[m
[31m-[m
[31m-			return true;[m
[31m-[m
[31m-		}[m
[31m-[m
[31m-}[m
[32m+[m[32m// SPDX-License-Identifier: UNLICENSED[m[41m[m
[32m+[m[32mpragma solidity ^0.8.0;[m[41m[m
[32m+[m[41m[m
[32m+[m[32m// Import this file to use console.log[m[41m[m
[32m+[m[32mimport 'hardhat/console.sol';[m[41m[m
[32m+[m[41m[m
[32m+[m[32m// console.log('Unlock time is %o and block timestamp is %o', unlockTime, block.timestamp);[m[41m[m
[32m+[m[32mcontract Token {[m[41m[m
[32m+[m[32m    // string public name = 'Dapp University';[m[41m[m
[32m+[m[32m    // string public symbol = 'DAPP';[m[41m[m
[32m+[m[41m    [m
[32m+[m[32m    // uint256 public totalSupply = 1000000 * (10**decimals);[m[41m[m
[32m+[m[32m    string public name;[m[41m[m
[32m+[m[32m    string public symbol;[m[41m[m
[32m+[m[32m    uint256 public decimals = 18;[m[41m[m
[32m+[m[32m    uint256 public totalSupply;[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    event Transfer(address indexed from, address indexed to, uint256 value);[m[41m[m
[32m+[m	[32mevent Approval(address indexed owner,[m[41m[m
[32m+[m	[32m address indexed spender,[m[41m[m
[32m+[m	[32m uint256 value[m[41m[m
[32m+[m	[32m );[m[41m[m
[32m+[m[32m    // Track balanaces[m[41m[m
[32m+[m[32m    mapping(address => uint256) public balanceOf;[m[41m[m
[32m+[m[32m    // Send Tokens[m[41m[m
[32m+[m[32m    mapping(address => mapping(address => uint256)) public allowance;[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    constructor([m[41m[m
[32m+[m[41m    [m	[32mstring memory _name,[m[41m[m
[32m+[m[41m    [m	[32mstring memory _symbol,[m[41m[m
[32m+[m[41m    [m	[32muint256 _totalSupply[m[41m[m
[32m+[m[41m    [m	[32m){[m[41m[m
[32m+[m[41m    [m	[32mname = _name;[m[41m[m
[32m+[m[41m    [m	[32msymbol = _symbol;[m[41m[m
[32m+[m[41m    [m	[32mtotalSupply = _totalSupply * (10**decimals);[m[41m[m
[32m+[m		[32mbalanceOf[msg.sender] = totalSupply;[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    }[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    function transfer(address _to, uint256 _value)[m[41m[m
[32m+[m	[32m    public[m[41m [m
[32m+[m	[32m    returns (bool success)[m[41m[m
[32m+[m	[32m    {[m[41m[m
[32m+[m[41m[m
[32m+[m	[41m    [m	[32m_transfer(msg.sender, _to, _value);[m[41m[m
[32m+[m	[41m    [m	[32mreturn true;[m[41m[m
[32m+[m[41m[m
[32m+[m	[32m    }[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m	[32mfunction approve(address _spender, uint256 _value)[m[41m[m
[32m+[m		[32mpublic returns (bool success)[m[41m[m
[32m+[m		[32m{[m[41m[m
[32m+[m			[32mrequire(_spender != address(0));[m[41m[m
[32m+[m[41m[m
[32m+[m			[32m// allowance[msg.sender][_spender.address] = 0;[m[41m[m
[32m+[m			[32mallowance[msg.sender][_spender] = _value;[m[41m[m
[32m+[m			[32mrequire(allowance[msg.sender][_spender] == _value);[m[41m[m
[32m+[m	[41m    [m	[32memit Approval(msg.sender, _spender, _value);[m[41m[m
[32m+[m[41m[m
[32m+[m			[32mreturn true;[m[41m[m
[32m+[m[41m[m
[32m+[m		[32m}[m[41m[m
[32m+[m[41m[m
[32m+[m	[32mfunction _transfer(address _from, address _to, uint256 _value)[m[41m[m
[32m+[m		[32minternal[m[41m[m
[32m+[m		[32m{[m[41m[m
[32m+[m			[32mrequire( balanceOf[_from] >= _value);[m[41m[m
[32m+[m			[32mrequire(_to != address(0));[m[41m[m
[32m+[m	[41m    [m	[32mbalanceOf[_from] = balanceOf[_from] - _value;[m[41m[m
[32m+[m	[41m    [m	[32mbalanceOf[_to] =  balanceOf[_to] + _value;[m[41m[m
[32m+[m	[41m    [m	[32m// emit Event[m[41m[m
[32m+[m	[41m    [m	[32memit Transfer(_from, _to, _value);[m[41m[m
[32m+[m		[32m}[m[41m[m
[32m+[m[41m[m
[32m+[m	[32mfunction transferFrom(address _from, address _to, uint256 _value)[m[41m[m
[32m+[m		[32mpublic returns (bool success)[m[41m[m
[32m+[m		[32m{[m[41m[m
[32m+[m[41m[m
[32m+[m			[32m// Check Approval[m[41m[m
[32m+[m			[32m// require()[m[41m[m
[32m+[m			[32mrequire(_value <= allowance[_from][msg.sender]);[m[41m[m
[32m+[m			[32m_transfer(_from, _to, _value);[m[41m[m
[32m+[m			[32mallowance[_from][msg.sender] = allowance[_from][msg.sender] - _value;[m[41m[m
[32m+[m			[32mreturn true;[m[41m[m
[32m+[m			[32m// Spend Tolens[m[41m[m
[32m+[m[41m[m
[32m+[m[41m		[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m		[32m}[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m}[m[41m[m
[1mdiff --git a/test/Token.js b/test/Token.js[m
[1mindex 1232c7e..87c670d 100644[m
[1m--- a/test/Token.js[m
[1m+++ b/test/Token.js[m
[36m@@ -1,169 +1,205 @@[m
[31m-const { ethers, waffle} = require('hardhat')[m
[31m-const {expect } = require('chai')[m
[31m-[m
[31m-// const hardhat = require('hardhat')[m
[31m-[m
[31m-const tokens = (n) => {[m
[31m-	return ethers.utils.parseUnits(n.toString(), 'ether')[m
[31m-}[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-describe('Token', ()=>{[m
[31m-[m
[31m-	let token, accounts, deployer, receiver, exchange[m
[31m-[m
[31m-	beforeEach( async ()=>{[m
[31m-		const Token = await ethers.getContractFactory('Token')[m
[31m-		token = await Token.deploy('Dapp University', 'DAPP', 1000000)[m
[31m-		accounts = await ethers.getSigners()[m
[31m-		deployer = accounts[0][m
[31m-		receiver = accounts[1][m
[31m-		exchange = accounts[2][m
[31m-[m
[31m-	})[m
[31m-[m
[31m-	describe('Deployment', ()=>{[m
[31m-		const name = 'Dapp University'[m
[31m-		const symbol = 'DAPP'[m
[31m-		const decimals = '18'[m
[31m-		const totalSupply = '1000000'[m
[31m-[m
[31m-		it('Has correct name', async () => {[m
[31m-			expect(await token.name()).to.equal(name)[m
[31m-		})[m
[31m-		it('Has correct Symbol', async () => {[m
[31m-			expect(await token.symbol()).to.equal(symbol)[m
[31m-		})[m
[31m-			it('Has correct Decimals', async () => {[m
[31m-			expect(await token.decimals()).to.equal(decimals)[m
[31m-		})[m
[31m-		it('Has correct Total Supply', async () => {[m
[31m-			const value = ethers.utils.parseUnits(totalSupply, 'ether')[m
[31m-			expect(await token.totalSupply()).to.equal(value)[m
[31m-		})		[m
[31m-		it('Assigns Total Supply to deployer', async () => {[m
[31m-			// const {token, deployer} = await waffle.loadFixture(deployedToken)[m
[31m-			expect(await token.totalSupply()).to.equal(await token.balanceOf(deployer.address))[m
[31m-		})		[m
[31m-[m
[31m-	})[m
[31m-[m
[31m-[m
[31m-[m
[31m-	describe('Sending Tokens', () => {[m
[31m-[m
[31m-		let ammount, transaction, result[m
[31m-		describe('success Cases', ()=>{[m
[31m-[m
[31m-			[m
[31m-			beforeEach( async ()=>{[m
[31m-				ammount = tokens(100)[m
[31m-				transaction = await token.connect(deployer).transfer(receiver.address, ammount)[m
[31m-				result = await transaction.wait()[m
[31m-[m
[31m-[m
[31m-			})[m
[31m-[m
[31m-[m
[31m-			it ('Transfer Token Balances', async () => {[m
[31m-				expect(await token.balanceOf(deployer.address)).to.equal(tokens(999900))[m
[31m-				expect(await token.balanceOf(receiver.address)).to.equal(ammount)[m
[31m-				[m
[31m-[m
[31m-			})[m
[31m-[m
[31m-			it ('Emits a Transfer event', async ()=>{[m
[31m-[m
[31m-				// Checking Event Transfer[m
[31m-				const event = result.events[0][m
[31m-				expect(event.event).to.equal('Transfer')[m
[31m-[m
[31m-				// Checking Arguments[m
[31m-				const args = event.args[m
[31m-				expect(event.args.to).to.equal(receiver.address)[m
[31m-				expect(event.args.from).to.equal(deployer.address)[m
[31m-				expect(event.args.value).to.equal(ammount)[m
[31m-[m
[31m-			})[m
[31m-[m
[31m-		})[m
[31m-[m
[31m-		describe('Failure Cases', () => {[m
[31m-			const totalSupply = tokens(1000000)[m
[31m-			it('rejects insufficient balances', async ()=>{[m
[31m-				//transfer more tokens than deployer has.[m
[31m-				const invalidAmount = tokens(totalSupply + 1)[m
[31m-				await expect(token.connect(deployer).transfer(accounts[0].address, invalidAmount)).to.be.reverted[m
[31m-[m
[31m-			})[m
[31m-[m
[31m-			it('rejects invalid recipient', async ()=>{[m
[31m-				const amount = tokens(100)[m
[31m-				await expect(token.connect(deployer).transfer('0x0000000000000000000000000000000000000000', amount)).to.be.reverted[m
[31m-[m
[31m-[m
[31m-			})[m
[31m-[m
[31m-		})[m
[31m-[m
[31m-[m
[31m-	})[m
[31m-[m
[31m-[m
[31m-	describe('Approving Tokens', () => {[m
[31m-[m
[31m-		let amount, transaction, result[m
[31m-[m
[31m-		beforeEach(async ()=>{[m
[31m-			amount = tokens(100)[m
[31m-			transaction = await token.connect(deployer).approve(exchange.address, amount)[m
[31m-			result = await transaction.wait()[m
[31m-		})[m
[31m-[m
[31m-		describe('Success', () => {[m
[31m-[m
[31m-			it('allocates an allowance for delegated Token Spending', async ()=>{[m
[31m-				expect(amount).to.equal(await token.allowance(deployer.address, exchange.address))[m
[31m-			})[m
[31m-[m
[31m-			it('Emmits an approval Event', async ()=>{[m
[31m-[m
[31m-				const event = result.events[0][m
[31m-				expect(event.event).to.equal('Approval')[m
[31m-[m
[31m-				// Checking Arguments[m
[31m-				const args = event.args[m
[31m-				expect(event.args.spender).to.equal(exchange.address)[m
[31m-				expect(event.args.value).to.equal(amount)[m
[31m-			})[m
[31m-[m
[31m-[m
[31m-		})[m
[31m-[m
[31m-	    describe('Failure', () => {[m
[31m-	      it('rejects invalid spenders', async () => {[m
[31m-	        await expect(token.connect(deployer).approve('0x0000000000000000000000000000000000000000', amount)).to.be.reverted[m
[31m-	      })[m
[31m-	    })[m
[31m-[m
[31m-	})[m
[31m-[m
[31m-[m
[31m-[m
[31m-})[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-	//  WITH HOOK Before each[m
[31m-	// let token[m
[31m-	// beforeEach(async ()=>{[m
[31m-	// 	const Token =a wait ethers.getContractFactory('Token')[m
[31m-	// 	token = await Token.deploy()[m
[31m-	// 	return token[m
[31m-	// })[m
[31m-[m
[31m-	// all tests[m
[32m+[m[32mconst { ethers, waffle} = require('hardhat')[m[41m[m
[32m+[m[32mconst {expect } = require('chai')[m[41m[m
[32m+[m[41m[m
[32m+[m[32m// const hardhat = require('hardhat')[m[41m[m
[32m+[m[41m[m
[32m+[m[32mconst tokens = (n) => {[m[41m[m
[32m+[m	[32mreturn ethers.utils.parseUnits(n.toString(), 'ether')[m[41m[m
[32m+[m[32m}[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mdescribe('Token', ()=>{[m[41m[m
[32m+[m[41m[m
[32m+[m	[32mlet token, accounts, deployer, receiver, exchange[m[41m[m
[32m+[m[41m[m
[32m+[m	[32mbeforeEach( async ()=>{[m[41m[m
[32m+[m		[32mconst Token = await ethers.getContractFactory('Token')[m[41m[m
[32m+[m		[32mtoken = await Token.deploy('Dapp University', 'DAPP', 1000000)[m[41m[m
[32m+[m		[32maccounts = await ethers.getSigners()[m[41m[m
[32m+[m		[32mdeployer = accounts[0][m[41m[m
[32m+[m		[32mreceiver = accounts[1][m[41m[m
[32m+[m		[32mexchange = accounts[2][m[41m[m
[32m+[m[41m[m
[32m+[m	[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m	[32mdescribe('Deployment', ()=>{[m[41m[m
[32m+[m		[32mconst name = 'Dapp University'[m[41m[m
[32m+[m		[32mconst symbol = 'DAPP'[m[41m[m
[32m+[m		[32mconst decimals = '18'[m[41m[m
[32m+[m		[32mconst totalSupply = '1000000'[m[41m[m
[32m+[m[41m[m
[32m+[m		[32mit('Has correct name', async () => {[m[41m[m
[32m+[m			[32mexpect(await token.name()).to.equal(name)[m[41m[m
[32m+[m		[32m})[m[41m[m
[32m+[m		[32mit('Has correct Symbol', async () => {[m[41m[m
[32m+[m			[32mexpect(await token.symbol()).to.equal(symbol)[m[41m[m
[32m+[m		[32m})[m[41m[m
[32m+[m			[32mit('Has correct Decimals', async () => {[m[41m[m
[32m+[m			[32mexpect(await token.decimals()).to.equal(decimals)[m[41m[m
[32m+[m		[32m})[m[41m[m
[32m+[m		[32mit('Has correct Total Supply', async () => {[m[41m[m
[32m+[m			[32mconst value = ethers.utils.parseUnits(totalSupply, 'ether')[m[41m[m
[32m+[m			[32mexpect(await token.totalSupply()).to.equal(value)[m[41m[m
[32m+[m		[32m})[m[41m		[m
[32m+[m		[32mit('Assigns Total Supply to deployer', async () => {[m[41m[m
[32m+[m			[32m// const {token, deployer} = await waffle.loadFixture(deployedToken)[m[41m[m
[32m+[m			[32mexpect(await token.totalSupply()).to.equal(await token.balanceOf(deployer.address))[m[41m[m
[32m+[m		[32m})[m[41m		[m
[32m+[m[41m[m
[32m+[m	[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m	[32mdescribe('Sending Tokens', () => {[m[41m[m
[32m+[m[41m[m
[32m+[m		[32mlet ammount, transaction, result[m[41m[m
[32m+[m		[32mdescribe('success Cases', ()=>{[m[41m[m
[32m+[m[41m[m
[32m+[m[41m			[m
[32m+[m			[32mbeforeEach( async ()=>{[m[41m[m
[32m+[m				[32mammount = tokens(100)[m[41m[m
[32m+[m				[32mtransaction = await token.connect(deployer).transfer(receiver.address, ammount)[m[41m[m
[32m+[m				[32mresult = await transaction.wait()[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m			[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m			[32mit ('Transfer Token Balances', async () => {[m[41m[m
[32m+[m				[32mexpect(await token.balanceOf(deployer.address)).to.equal(tokens(999900))[m[41m[m
[32m+[m				[32mexpect(await token.balanceOf(receiver.address)).to.equal(ammount)[m[41m[m
[32m+[m[41m				[m
[32m+[m[41m[m
[32m+[m			[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m			[32mit ('Emits a Transfer event', async ()=>{[m[41m[m
[32m+[m[41m[m
[32m+[m				[32m// Checking Event Transfer[m[41m[m
[32m+[m				[32mconst event = result.events[0][m[41m[m
[32m+[m				[32mexpect(event.event).to.equal('Transfer')[m[41m[m
[32m+[m[41m[m
[32m+[m				[32m// Checking Arguments[m[41m[m
[32m+[m				[32mconst args = event.args[m[41m[m
[32m+[m				[32mexpect(event.args.to).to.equal(receiver.address)[m[41m[m
[32m+[m				[32mexpect(event.args.from).to.equal(deployer.address)[m[41m[m
[32m+[m				[32mexpect(event.args.value).to.equal(ammount)[m[41m[m
[32m+[m[41m[m
[32m+[m			[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m		[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m		[32mdescribe('Failure Cases', () => {[m[41m[m
[32m+[m			[32mconst totalSupply = tokens(1000000)[m[41m[m
[32m+[m			[32mit('rejects insufficient balances', async ()=>{[m[41m[m
[32m+[m				[32m//transfer more tokens than deployer has.[m[41m[m
[32m+[m				[32mconst invalidAmount = tokens(totalSupply + 1)[m[41m[m
[32m+[m				[32mawait expect(token.connect(deployer).transfer(accounts[0].address, invalidAmount)).to.be.reverted[m[41m[m
[32m+[m[41m[m
[32m+[m			[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m			[32mit('rejects invalid recipient', async ()=>{[m[41m[m
[32m+[m				[32mconst amount = tokens(100)[m[41m[m
[32m+[m				[32mawait expect(token.connect(deployer).transfer('0x0000000000000000000000000000000000000000', amount)).to.be.reverted[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m			[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m		[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m	[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m	[32mdescribe('Approving Tokens', () => {[m[41m[m
[32m+[m[41m[m
[32m+[m		[32mlet amount, transaction, result[m[41m[m
[32m+[m[41m[m
[32m+[m		[32mbeforeEach(async ()=>{[m[41m[m
[32m+[m			[32mamount = tokens(100)[m[41m[m
[32m+[m			[32mtransaction = await token.connect(deployer).approve(exchange.address, amount)[m[41m[m
[32m+[m			[32mresult = await transaction.wait()[m[41m[m
[32m+[m		[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m		[32mdescribe('Success', () => {[m[41m[m
[32m+[m[41m[m
[32m+[m			[32mit('allocates an allowance for delegated Token Spending', async ()=>{[m[41m[m
[32m+[m				[32mexpect(amount).to.equal(await token.allowance(deployer.address, exchange.address))[m[41m[m
[32m+[m			[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m			[32mit('Emmits an approval Event', async ()=>{[m[41m[m
[32m+[m[41m[m
[32m+[m				[32mconst event = result.events[0][m[41m[m
[32m+[m				[32mexpect(event.event).to.equal('Approval')[m[41m[m
[32m+[m[41m[m
[32m+[m				[32m// Checking Arguments[m[41m[m
[32m+[m				[32mconst args = event.args[m[41m[m
[32m+[m				[32mexpect(event.args.spender).to.equal(exchange.address)[m[41m[m
[32m+[m				[32mexpect(event.args.value).to.equal(amount)[m[41m[m
[32m+[m			[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m		[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m	[32m    describe('Failure', () => {[m[41m[m
[32m+[m	[32m      it('rejects invalid spenders', async () => {[m[41m[m
[32m+[m	[32m        await expect(token.connect(deployer).approve('0x0000000000000000000000000000000000000000', amount)).to.be.reverted[m[41m[m
[32m+[m	[32m      })[m[41m[m
[32m+[m	[32m    })[m[41m[m
[32m+[m[41m[m
[32m+[m	[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m	[32mdescribe('Delegated Token Transfers', ()=>{[m[41m[m
[32m+[m[41m[m
[32m+[m		[32mlet amount, transaction, result[m[41m[m
[32m+[m[41m[m
[32m+[m		[32mbeforeEach(async ()=>{[m[41m[m
[32m+[m			[32mamount = tokens(100)[m[41m[m
[32m+[m			[32mtransaction = await token.connect(deployer).approve(exchange.address, amount)[m[41m[m
[32m+[m			[32mresult = await transaction.wait()[m[41m[m
[32m+[m		[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m		[32mdescribe('Success', ()=>{[m[41m[m
[32m+[m			[32mbeforeEach(async ()=>{[m[41m[m
[32m+[m				[32mtTransferFrom = await token.connect(exchange).transferFrom(deployer.address, receiver.address, amount)[m[41m[m
[32m+[m				[32mrTransferFrom = await tTransferFrom.wait()[m[41m[m
[32m+[m			[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m			[32mit ('Transfer Token Balances', async () => {[m[41m[m
[32m+[m				[32mexpect(await token.balanceOf(deployer.address)).to.be.equal(tokens(999900))[m[41m[m
[32m+[m				[32mexpect(await token.balanceOf(receiver.address)).to.be.equal(amount)[m[41m[m
[32m+[m			[32m})[m[41m[m
[32m+[m			[32mit ('Rests the allowance', async () => {[m[41m[m
[32m+[m				[32mexpect(await token.allowance(deployer.address, exchange.address)).to.be.equal(0)[m[41m[m
[32m+[m[41m[m
[32m+[m			[32m})[m[41m[m
[32m+[m			[32mit ('Emits a Transfer Event', async () => {[m[41m[m
[32m+[m				[32mconst event = rTransferFrom.events[0][m[41m[m
[32m+[m				[32mexpect(event.event).to.equal('Transfer')[m[41m[m
[32m+[m[41m[m
[32m+[m				[32mconst args = event.args[m[41m[m
[32m+[m				[32mexpect(args.from).to.equal(deployer.address)[m[41m[m
[32m+[m				[32mexpect(args.to).to.equal(receiver.address)[m[41m[m
[32m+[m				[32mexpect(args.value).to.equal(amount)[m[41m[m
[32m+[m			[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m		[32m})[m[41m[m
[32m+[m		[32mdescribe('Failure', ()=>{[m[41m[m
[32m+[m			[32mconst invalidAmount = tokens(1000000000)[m[41m[m
[32m+[m			[32mit ('Transfer invalid Amount', async () => {[m[41m[m
[32m+[m[41m[m
[32m+[m				[32mawait expect(token.connect(exchange).transferFrom(deployer.address, receiver.address, invalidAmount)).to.be.reverted[m[41m[m
[32m+[m			[32m})[m[41m[m
[32m+[m[41m				[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m		[32m})[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m	[32m})[m[41m	[m
[32m+[m[41m[m
[32m+[m[32m})[m
\ No newline at end of file[m
